Wikipedia says =>

The composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. The intent of a composite is to "compose" objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly.


Real World Example => 

Suppose, you are assigned task to write a code that will allow user to assign respective employee to teamlead and if work get done or by any means there must be provsion to un-assign particular employee from teamlead.  

It’s often used to represent hierarchies of user interface components or the code that works with graphs.

Advantages => 

* You can work with complex tree structures more conveniently: use polymorphism and recursion to your advantage.
* You can easily add a new component to the architecture or delete an existing component from the architecture.


Disadvantage => 

* If you want to maintain the ordering of child nodes (for example, if the parse trees are represented as components), you may need to take special care.

