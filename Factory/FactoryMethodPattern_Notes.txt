Purpose => 

provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.

Wikipedia says =>

The factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.

The Factory Method design pattern describes how to solve such problems:

* Define a separate operation (factory method) for creating an object.
* Create an object by calling a factory method.

Real World Example => 

Suppose you are given task to make a function that will return connection string of database. What If there are different database server is being used in an application and even that time while you are writing code you are not sure more database server can be added later. Here factory method design pattern can help you easily.   

Advantages => 

* You avoid tight coupling between the creator and the concrete products.





