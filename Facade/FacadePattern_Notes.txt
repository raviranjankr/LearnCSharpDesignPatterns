Wikipedia says =>

A facade is an object that serves as a front-facing interface masking more complex underlying or structural code.

The facade pattern is typically used when

* a simple interface is required to access a complex system,
* a system is very complex or difficult to understand,
* an entry point is needed to each level of layered software, or
* the abstractions and implementations of a subsystem are tightly coupled.


Real World Example => 

How do you book order online? "Select product and pay only" you may answer it. That is what you believe because you are using a simple interface that you are being provided, internally it must do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade.
Here, we will create an application that will perform all the task from checking availability of product, to place order, make payment and notify to user. All these tasks will get done with a simple function.

Advantages => 

* You can isolate your code from the complexity of a subsystem.
* You can combine several behaviors by wrapping an object into multiple decorators.




